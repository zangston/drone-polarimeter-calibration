import RPi.GPIO as GPIO
import time

class DRV8825():
    def __init__(self, dir_pin, step_pin, enable_pin, mode_pins):
        self.dir_pin = dir_pin
        self.step_pin = step_pin
        self.enable_pin = enable_pin
        self.mode_pins = mode_pins

        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.dir_pin, GPIO.OUT)
        GPIO.setup(self.step_pin, GPIO.OUT)
        GPIO.setup(self.enable_pin, GPIO.OUT)
        GPIO.setup(self.mode_pins, GPIO.OUT)

    def SetMicroStep(self, mode, stepformat):
        microstep = {'fullstep': (0, 0, 0), 'halfstep': (1, 0, 0), '1/4step': (0, 1, 0), '1/8step': (1, 1, 0), '1/16step': (0, 0, 1), '1/32step': (1, 0, 1)}
        print("Control mode:", mode)
        if (mode == 'software'):
            print("set pins")
            GPIO.output(self.mode_pins, microstep[stepformat])

    def TurnStep(self, Dir, steps, stepdelay=0.005):
        if (Dir == 'forward'):
            GPIO.output(self.dir_pin, 0)
        elif (Dir == 'backward'):
            GPIO.output(self.dir_pin, 1)
        else:
            print("the dir must be : 'forward' or 'backward'")
            return
        for i in range(steps):
            GPIO.output(self.step_pin, True)
            time.sleep(stepdelay)
            GPIO.output(self.step_pin, False)
            time.sleep(stepdelay)

    def Stop(self):
        GPIO.output(self.enable_pin, 0)


Motor1 = DRV8825(dir_pin=13, step_pin=19, enable_pin=12, mode_pins=(16, 17, 20))
print("here")
Motor1.SetMicroStep('software', 'fullstep')
print("there")
Motor1.TurnStep(Dir='forward', steps=200, stepdelay=0.005)
time.sleep(0.5)
print("sleep")
Motor1.TurnStep(Dir='backward', steps=400, stepdelay=0.005)
print("slept")
Motor1.Stop()
print("stop")